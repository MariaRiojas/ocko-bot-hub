# src/flows/logic_especialista/op1_alertas_ml.py

from src.utils import data_loader

def process_alertas_recuperacion():
    """OpciÃ³n 1: Muestra alertas crÃ­ticas (Red/Yellow) basadas en el ML."""
    
    if data_loader.INDICATORS_DF.empty:
        return "Error: No hay datos de indicadores procesados. Ejecute data_processor.py."

    df = data_loader.INDICATORS_DF.copy()

    # Identificar alertas crÃ­ticas o de monitoreo
    alert_df = df[df['SemÃ¡foro'].isin(['Red', 'Yellow'])].sort_values(by='Avg_Fresh_weight', ascending=True)
    
    if alert_df.empty:
        return "âœ… No hay alertas crÃ­ticas (ðŸ”´) o medias (ðŸŸ¡) activas en las unidades evaluadas."
    
    red_count = (alert_df['SemÃ¡foro'] == 'Red').count()
    yellow_count = (alert_df['SemÃ¡foro'] == 'Yellow').count()
    
    # Detalle de las 3 zonas mÃ¡s crÃ­ticas
    zonas_criticas_info = ""
    for _, row in alert_df.head(3).iterrows():
        semaforo = "ðŸ”´" if row['SemÃ¡foro'] == 'Red' else "ðŸŸ¡"
        zonas_criticas_info += (
            f"\n  - **{row['Evaluation_unit']}** ({semaforo}): Forraje {row['Avg_Fresh_weight']:.1f} kg/ha"
        )
    
    return (
        f"ðŸš¨ *RESUMEN DE ALERTAS DE RECUPERACIÃ“N*\n"
        f"ðŸ”´ **{red_count}** Zonas CrÃ­ticas.\n"
        f"ðŸŸ¡ **{yellow_count}** Zonas de Monitoreo.\n\n"
        f"*Top 3 Zonas a Revisar:*{zonas_criticas_info}\n"
        "AcciÃ³n: Ingrese el nombre de la zona para ver anÃ¡lisis detallado y recomendaciones."
    )