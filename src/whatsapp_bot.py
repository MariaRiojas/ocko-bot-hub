import os
import joblib
import pandas as pd
from dotenv import load_dotenv

# --- Configuraci√≥n de Entorno y Rutas ---
load_dotenv()

# Credenciales del API de WhatsApp (Simuladas con Variables de Entorno)
WHATSAPP_API_TOKEN = os.getenv("WHATSAPP_API_TOKEN", "SIMULATED_TOKEN")
WHATSAPP_API_URL = os.getenv("WHATSAPP_API_URL", "https://graph.whatsapp.com/v17.0/PHONE_ID/messages")
TEST_PHONE_ID = os.getenv("TEST_PHONE_ID", "1234567890") # ID del n√∫mero de WhatsApp

BASE_DIR = os.path.dirname(os.path.abspath(__file__)) 
MODELS_PATH = os.path.join(BASE_DIR, '..', 'models')
PROCESSED_DATA_PATH = os.path.join(BASE_DIR, '..', 'data', 'processed')

MODEL_FILE = os.path.join(MODELS_PATH, 'random_forest_model.pkl')
LE_FILE = os.path.join(MODELS_PATH, 'label_encoder.pkl')
INDICATORS_FILE = os.path.join(PROCESSED_DATA_PATH, 'ML_Grassland_Indicators.csv')

# --- 1. Carga de Modelo y Datos ---

try:
    ML_MODEL = joblib.load(MODEL_FILE)
    LABEL_ENCODER = joblib.load(LE_FILE)
    INDICATORS_DF = pd.read_csv(INDICATORS_FILE)
    print("‚úÖ Modelos ML e Indicadores cargados correctamente.")
except Exception as e:
    print(f"‚ùå Error al cargar artefactos de ML. Detalle: {e}")
    ML_MODEL = None
    LABEL_ENCODER = None
    INDICATORS_DF = pd.DataFrame()


# --- 2. L√≥gica de Comunicaci√≥n de WhatsApp (Simulada) ---

def send_whatsapp_message(recipient_number, message_body):
    """
    SIMULA el env√≠o de un mensaje de texto a trav√©s de la API de WhatsApp Business Cloud.
    
    En una implementaci√≥n real, esta funci√≥n usar√≠a la librer√≠a 'requests' para enviar 
    una petici√≥n POST al WHATSAPP_API_URL con el token y el payload JSON.
    """
    
    # üö® NOTA: Esta es una SIMULACI√ìN. Para un entorno real, usar√≠as:
    # import requests
    # headers = {'Authorization': f'Bearer {WHATSAPP_API_TOKEN}', 'Content-Type': 'application/json'}
    # data = {
    #     "messaging_product": "whatsapp",
    #     "to": recipient_number,
    #     "type": "text",
    #     "text": {"body": message_body}
    # }
    # response = requests.post(WHATSAPP_API_URL, headers=headers, json=data)
    # return response.status_code

    # Simulando el √©xito:
    print(f"   [API SIMULADA]: Mensaje enviado al n√∫mero {recipient_number[:5]}... con el token OK.")
    return 200 # Retorna un c√≥digo de estado 200 (√âxito)

# --- 3. Funciones de Flujo (Comunero) ---

def comunero_menu(user_input, phone_number):
    """Maneja el flujo del comunero y usa la API para enviar la respuesta."""
    
    # ... (El cuerpo de la funci√≥n 'comunero_menu' es el mismo que antes, pero con 'phone_number' como argumento) ...
    # Men√∫ Principal
    if user_input.lower() in ["hola", "menu", "0"]:
        response_text = (
            "üå≥ *Bienvenido a Ocko (Comunero)*\n"
            "Selecciona una opci√≥n:\n"
            "1. Estado de mis pastos\n"
            "2. Agua y clima\n"
            "3. Enviar reporte\n"
            "4. Consejos pr√°cticos\n"
            "5. Emergencia clim√°tica"
        )
    
    # 1. Estado de mis pastos 
    elif user_input == "1":
        response_text = "Por favor, ingresa el nombre de tu zona o unidad de evaluaci√≥n (ej: TAM-18, ComunidadA) para el pron√≥stico."
        
    elif user_input.upper().startswith(('TAM-', 'COMUNIDAD')): # Asume que el input es la zona
        zona = user_input.upper()
        response_text = process_estado_pastos(zona)

    # 4. Consejos pr√°cticos (Simulaci√≥n)
    elif user_input == "4":
        response_text = ("üí° *Consejo de la Semana: Rotaci√≥n.*\n"
                "Dado el vigor promedio, es un buen momento para planificar el siguiente ciclo de rotaci√≥n. "
                "Permite un descanso de 60 d√≠as a las √°reas utilizadas. ¬øDeseas m√°s detalles sobre manejo del forraje?")
        
    # El resto de las opciones simulan la continuaci√≥n del flujo
    elif user_input == "2":
        response_text = "üåßÔ∏è Submen√∫ Agua y Clima: ¬øDeseas ver informaci√≥n de lluvia, temperatura o disponibilidad de agua?"
    elif user_input == "3":
        response_text = "üì∏ Submen√∫ Reporte: ¬øQu√© tipo de reporte deseas enviar? (1. Foto, 2. Ubicaci√≥n, 3. Problema general)"
    elif user_input == "5":
        response_text = "üö® *EMERGENCIA CLIM√ÅTICA*: Conectando con el t√©cnico de turno..."

    else:
        response_text = "Opci√≥n no v√°lida. Por favor, ingresa el n√∫mero de la opci√≥n o 'menu' para volver al inicio."
    
    # Enviamos la respuesta simulando el uso del API
    send_whatsapp_message(phone_number, response_text)
    return response_text # Retornamos el texto para la simulaci√≥n de consola

# ... (La funci√≥n 'process_estado_pastos' es la misma que antes) ...
def process_estado_pastos(zona):
    # ... (El cuerpo de la funci√≥n sigue siendo el mismo) ...
    if ML_MODEL is None:
        return f"Error interno: El modelo de predicci√≥n no est√° disponible. Intenta m√°s tarde o reporta una emergencia (5)."

    # --- SIMULACI√ìN DE DATOS NUEVOS PARA LA ZONA ---
    vigor_predicho = 15
    utilizacion_predicha = 15
    
    # Creamos el DataFrame para la predicci√≥n
    new_data = pd.DataFrame({
        'Avg_Plant_vigor': [vigor_predicho], 
        'Avg_Utilization_degree': [utilizacion_predicha]
    })
    
    # Predicci√≥n del Modelo ML
    prediction_encoded = ML_MODEL.predict(new_data)
    semaforo = LABEL_ENCODER.inverse_transform(prediction_encoded)[0]
    
    # L√≥gica de Recomendaci√≥n Basada en la Predicci√≥n
    if semaforo == 'Green':
        emoji = "üü¢"
        recomendacion = "Sus pastos est√°n saludables. ¬°Excelente manejo! Contin√∫e con la rotaci√≥n planificada."
    elif semaforo == 'Yellow':
        emoji = "üü°"
        recomendacion = "El forraje es adecuado, pero el sistema detecta riesgo. Monitoree de cerca la zona."
    else: # Red
        emoji = "üî¥"
        recomendacion = "¬°ALERTA CR√çTICA! El pastizal muestra signos de degradaci√≥n. Active la rotaci√≥n inmediata y notifique al t√©cnico."

    return (
        f"üå≥ *ESTADO PASTOS (Zona: {zona})*\n"
        f"Sem√°foro Predictivo: **{semaforo}** {emoji}\n\n"
        f"Modelo Predictivo (ML) basado en vigor y utilizaci√≥n:\n"
        f"  - Vigor Detectado: {vigor_predicho}\n"
        f"  - Utilizaci√≥n: {utilizacion_predicha}\n\n"
        f"üìù **Recomendaci√≥n:** {recomendacion}"
    )


# --- 4. Funciones de Flujo (Especialista) ---

def especialista_menu(user_input, phone_number):
    """Maneja el flujo del especialista y usa la API para enviar la respuesta."""
    
    # ... (El cuerpo de la funci√≥n 'especialista_menu' es el mismo que antes, con 'phone_number') ...
    if user_input.lower() in ["tecnico", "menu", "0"]:
        response_text = (
            "üî¨ *Modo T√©cnico (Especialista)*\n"
            "Selecciona una opci√≥n:\n"
            "1. Alertas de recuperaci√≥n (ML)\n"
            "2. Mapas interactivos\n"
            "3. Reportes comunitarios\n"
            "4. Validar predicciones (ML)\n"
            "5. Configurar zonas\n"
            "6. Reporte autom√°tico"
        )

    # 1. Alertas de recuperaci√≥n 
    elif user_input == "1":
        response_text = process_alertas_recuperacion()
    
    # 4. Validar predicciones 
    elif user_input == "4":
        response_text = process_validar_predicciones()

    # El resto de las opciones simulan la continuaci√≥n del flujo
    elif user_input == "2":
        response_text = "üîó *Mapas:* Enlace enviado a tu correo. (Simulaci√≥n: Enlace a GEO-Viewer aqu√≠)"
    elif user_input == "3":
        response_text = "üìù *Reportes:* Hay 3 reportes pendientes de la √∫ltima semana. ¬øDesea ver detalles por n√∫mero?"
    elif user_input == "5":
        response_text = "‚öôÔ∏è *Configuraci√≥n:* Para agregar/modificar zonas, ingrese el comando: CONFIG ZONA <NOMBRE> <COORDENADAS>."
    elif user_input == "6":
        response_text = "üìß *Reporte Auto:* Reporte semanal generado y enviado al correo del equipo. Finaliza flujo."

    else:
        response_text = "Opci√≥n de Especialista no v√°lida. Ingrese el n√∫mero o 'tecnico'."

    # Enviamos la respuesta simulando el uso del API
    send_whatsapp_message(phone_number, response_text)
    return response_text # Retornamos el texto para la simulaci√≥n de consola

# ... (Las funciones 'process_alertas_recuperacion' y 'process_validar_predicciones' son las mismas que antes) ...
def process_alertas_recuperacion():
    # ... (Cuerpo igual) ...
    if INDICATORS_DF.empty:
        return "Error: No hay datos de indicadores procesados para generar alertas."

    alert_df = INDICATORS_DF[INDICATORS_DF['Sem√°foro'].isin(['Red', 'Yellow'])]
    
    if alert_df.empty:
        return "‚úÖ No hay alertas cr√≠ticas (üî¥) o medias (üü°) activas en las unidades evaluadas."
    
    red_count = (alert_df['Sem√°foro'] == 'Red').sum()
    yellow_count = (alert_df['Sem√°foro'] == 'Yellow').sum()
    
    zonas_criticas = alert_df[alert_df['Sem√°foro'] == 'Red']['Evaluation_unit'].unique()
    zonas_list = ', '.join(zonas_criticas[:5])

    return (
        f"üö® *ALERTAS DE RECUPERACI√ìN*\n"
        f"üî¥ **{red_count}** Zonas Cr√≠ticas (Red).\n"
        f"üü° **{yellow_count}** Zonas de Monitoreo (Yellow).\n\n"
        f"Zonas üî¥: {zonas_list}{'...' if len(zonas_criticas) > 5 else ''}\n"
        "Acci√≥n: Ingrese una zona para ver an√°lisis detallado y recomendaciones."
    )

def process_validar_predicciones():
    # ... (Cuerpo igual) ...
    muestras = len(INDICATORS_DF)
    clases_unicas = INDICATORS_DF['Sem√°foro'].nunique()

    return (
        f"üìä *VALIDACI√ìN DE PREDICCIONES*\n"
        f"Estado del modelo: **Requiere Validaci√≥n Urgente**\n\n"
        f"Detalles:\n"
        f" - Muestras Totales: {muestras}\n"
        f" - Clases de Sem√°foro encontradas: {clases_unicas} (El modelo entren√≥ solo en {clases_unicas} clases).\n"
        "Recomendaci√≥n: Necesitamos datos de campo para las clases faltantes (Yellow/Red) "
        "para evitar sesgos en la predicci√≥n. Priorice la validaci√≥n en zonas de baja disponibilidad."
    )


# --- 5. Funci√≥n de Simulaci√≥n del Bot ---

def run_bot_simulation(rol, mensaje, phone_number):
    """Funci√≥n que dirige el flujo al Comunero o Especialista y simula la respuesta."""
    print(f"\n[{rol.upper()} - {phone_number}]: Mensaje entrante: '{mensaje}'")
    
    if rol.lower() == 'comunero':
        response = comunero_menu(mensaje, phone_number)
    elif rol.lower() == 'especialista':
        response = especialista_menu(mensaje, phone_number)
    else:
        response = "Rol no reconocido. Ingrese 'comunero' o 'especialista' para iniciar."
        
    print(f"[{rol.upper()}]: Respuesta saliente (Contenido):\n{response}")
    return response

if __name__ == "__main__":
    
    # ‚ö†Ô∏è ASEG√öRATE DE TENER EL ARCHIVO .env CON LAS VARIABLES ANTES DE USAR ESTA SECCI√ìN
    COMUNERO_PHONE = "51987654321" # N√∫mero de prueba simulado para el comunero
    ESPECIALISTA_PHONE = "51912345678" # N√∫mero de prueba simulado para el especialista

    print("\n\n=============== INICIO SIMULACI√ìN OCKO BOT (CON API WHATSAPP SIMULADA) ===============\n")

    # 1. Flujo Comunero
    run_bot_simulation("comunero", "hola", COMUNERO_PHONE)
    run_bot_simulation("comunero", "1", COMUNERO_PHONE)
    run_bot_simulation("comunero", "TAM-18", COMUNERO_PHONE) # Usa el modelo ML
    run_bot_simulation("comunero", "5", COMUNERO_PHONE) # Emergencia

    print("\n----------------------------------------------------")

    # 2. Flujo Especialista
    run_bot_simulation("especialista", "tecnico", ESPECIALISTA_PHONE)
    run_bot_simulation("especialista", "4", ESPECIALISTA_PHONE) # Validar Predicciones (ML)
    run_bot_simulation("especialista", "6", ESPECIALISTA_PHONE) # Reporte auto